
// Generated from stl.g4 by ANTLR 4.10.1


#include "stlLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct StlLexerStaticData final {
  StlLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  StlLexerStaticData(const StlLexerStaticData&) = delete;
  StlLexerStaticData(StlLexerStaticData&&) = delete;
  StlLexerStaticData& operator=(const StlLexerStaticData&) = delete;
  StlLexerStaticData& operator=(StlLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag stllexerLexerOnceFlag;
StlLexerStaticData *stllexerLexerStaticData = nullptr;

void stllexerLexerInitialize() {
  assert(stllexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<StlLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "DT_ANDF", "STL_EVENTUALLY", 
      "STL_ALWAYS", "RELEASE", "IMPL", "SCOL", "COL", "COMMA", "FIRST_MATCH", 
      "SIGN", "LGPAREN", "RGPAREN", "LCPAREN", "RCPAREN", "LPAREN", "RPAREN", 
      "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", "NUMERIC", "VERILOG_BINARY", 
      "GCC_BINARY", "HEX", "BOOLEAN", "PLUS", "MINUS", "TIMES", "DIV", "GT", 
      "GE", "LT", "LE", "EQ", "NEQ", "BAND", "BOR", "BXOR", "NEG", "LSHIFT", 
      "RSHIFT", "AND", "OR", "NOT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'P'", "'X'", "',bool>'", "',logic('", "')>'", "',numeric('", 
      "'..F..'", "'F'", "'G'", "'release'", "'->'", "';'", "':'", "','", 
      "'first_match'", "", "'{'", "'}'", "'['", "']'", "'('", "')'", "", 
      "", "", "", "", "", "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", "'<'", 
      "'<='", "'=='", "'!='", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", 
      "'&&'", "'||'", "'!'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "DT_ANDF", "STL_EVENTUALLY", "STL_ALWAYS", 
      "RELEASE", "IMPL", "SCOL", "COL", "COMMA", "FIRST_MATCH", "SIGN", 
      "LGPAREN", "RGPAREN", "LCPAREN", "RCPAREN", "LPAREN", "RPAREN", "VARIABLE", 
      "NUMERIC", "VERILOG_BINARY", "GCC_BINARY", "HEX", "BOOLEAN", "PLUS", 
      "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", "EQ", "NEQ", "BAND", 
      "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", "AND", "OR", "NOT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,48,323,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,
  	6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
  	1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
  	1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,3,22,189,8,22,1,22,1,22,5,22,
  	193,8,22,10,22,12,22,196,9,22,1,23,1,23,3,23,200,8,23,1,23,3,23,203,8,
  	23,3,23,205,8,23,1,24,1,24,1,24,3,24,210,8,24,1,25,3,25,213,8,25,1,25,
  	4,25,216,8,25,11,25,12,25,217,1,25,1,25,4,25,222,8,25,11,25,12,25,223,
  	3,25,226,8,25,1,26,1,26,1,26,4,26,231,8,26,11,26,12,26,232,1,27,1,27,
  	1,27,1,27,4,27,239,8,27,11,27,12,27,240,1,28,1,28,1,28,1,28,4,28,247,
  	8,28,11,28,12,28,248,1,28,1,28,1,28,1,28,4,28,255,8,28,11,28,12,28,256,
  	3,28,259,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	3,29,272,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
  	1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,
  	1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,
  	1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,0,0,50,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,0,49,0,51,24,53,25,55,
  	26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,
  	79,38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,1,0,
  	7,2,0,115,115,117,117,3,0,65,90,95,95,97,122,5,0,65,79,81,87,89,90,95,
  	95,97,122,5,0,46,46,48,57,65,90,95,95,97,122,2,0,48,57,97,102,2,0,48,
  	57,65,70,3,0,9,10,13,13,32,32,334,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
  	0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
  	0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
  	0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
  	39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,51,1,0,0,0,0,53,1,
  	0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
  	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
  	75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
  	0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
  	0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,105,1,0,0,0,
  	7,112,1,0,0,0,9,120,1,0,0,0,11,123,1,0,0,0,13,133,1,0,0,0,15,139,1,0,
  	0,0,17,141,1,0,0,0,19,143,1,0,0,0,21,151,1,0,0,0,23,154,1,0,0,0,25,156,
  	1,0,0,0,27,158,1,0,0,0,29,160,1,0,0,0,31,172,1,0,0,0,33,174,1,0,0,0,35,
  	176,1,0,0,0,37,178,1,0,0,0,39,180,1,0,0,0,41,182,1,0,0,0,43,184,1,0,0,
  	0,45,188,1,0,0,0,47,204,1,0,0,0,49,209,1,0,0,0,51,212,1,0,0,0,53,227,
  	1,0,0,0,55,234,1,0,0,0,57,258,1,0,0,0,59,271,1,0,0,0,61,273,1,0,0,0,63,
  	275,1,0,0,0,65,277,1,0,0,0,67,279,1,0,0,0,69,281,1,0,0,0,71,283,1,0,0,
  	0,73,286,1,0,0,0,75,288,1,0,0,0,77,291,1,0,0,0,79,294,1,0,0,0,81,297,
  	1,0,0,0,83,299,1,0,0,0,85,301,1,0,0,0,87,303,1,0,0,0,89,305,1,0,0,0,91,
  	308,1,0,0,0,93,311,1,0,0,0,95,314,1,0,0,0,97,317,1,0,0,0,99,319,1,0,0,
  	0,101,102,5,80,0,0,102,2,1,0,0,0,103,104,5,88,0,0,104,4,1,0,0,0,105,106,
  	5,44,0,0,106,107,5,98,0,0,107,108,5,111,0,0,108,109,5,111,0,0,109,110,
  	5,108,0,0,110,111,5,62,0,0,111,6,1,0,0,0,112,113,5,44,0,0,113,114,5,108,
  	0,0,114,115,5,111,0,0,115,116,5,103,0,0,116,117,5,105,0,0,117,118,5,99,
  	0,0,118,119,5,40,0,0,119,8,1,0,0,0,120,121,5,41,0,0,121,122,5,62,0,0,
  	122,10,1,0,0,0,123,124,5,44,0,0,124,125,5,110,0,0,125,126,5,117,0,0,126,
  	127,5,109,0,0,127,128,5,101,0,0,128,129,5,114,0,0,129,130,5,105,0,0,130,
  	131,5,99,0,0,131,132,5,40,0,0,132,12,1,0,0,0,133,134,5,46,0,0,134,135,
  	5,46,0,0,135,136,5,70,0,0,136,137,5,46,0,0,137,138,5,46,0,0,138,14,1,
  	0,0,0,139,140,5,70,0,0,140,16,1,0,0,0,141,142,5,71,0,0,142,18,1,0,0,0,
  	143,144,5,114,0,0,144,145,5,101,0,0,145,146,5,108,0,0,146,147,5,101,0,
  	0,147,148,5,97,0,0,148,149,5,115,0,0,149,150,5,101,0,0,150,20,1,0,0,0,
  	151,152,5,45,0,0,152,153,5,62,0,0,153,22,1,0,0,0,154,155,5,59,0,0,155,
  	24,1,0,0,0,156,157,5,58,0,0,157,26,1,0,0,0,158,159,5,44,0,0,159,28,1,
  	0,0,0,160,161,5,102,0,0,161,162,5,105,0,0,162,163,5,114,0,0,163,164,5,
  	115,0,0,164,165,5,116,0,0,165,166,5,95,0,0,166,167,5,109,0,0,167,168,
  	5,97,0,0,168,169,5,116,0,0,169,170,5,99,0,0,170,171,5,104,0,0,171,30,
  	1,0,0,0,172,173,7,0,0,0,173,32,1,0,0,0,174,175,5,123,0,0,175,34,1,0,0,
  	0,176,177,5,125,0,0,177,36,1,0,0,0,178,179,5,91,0,0,179,38,1,0,0,0,180,
  	181,5,93,0,0,181,40,1,0,0,0,182,183,5,40,0,0,183,42,1,0,0,0,184,185,5,
  	41,0,0,185,44,1,0,0,0,186,187,5,58,0,0,187,189,5,58,0,0,188,186,1,0,0,
  	0,188,189,1,0,0,0,189,190,1,0,0,0,190,194,3,47,23,0,191,193,3,49,24,0,
  	192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,46,
  	1,0,0,0,196,194,1,0,0,0,197,199,5,80,0,0,198,200,7,1,0,0,199,198,1,0,
  	0,0,200,205,1,0,0,0,201,203,7,2,0,0,202,201,1,0,0,0,203,205,1,0,0,0,204,
  	197,1,0,0,0,204,202,1,0,0,0,205,48,1,0,0,0,206,210,7,3,0,0,207,208,5,
  	58,0,0,208,210,5,58,0,0,209,206,1,0,0,0,209,207,1,0,0,0,210,50,1,0,0,
  	0,211,213,5,45,0,0,212,211,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,
  	216,2,48,57,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,217,218,
  	1,0,0,0,218,225,1,0,0,0,219,221,5,46,0,0,220,222,2,48,57,0,221,220,1,
  	0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,
  	225,219,1,0,0,0,225,226,1,0,0,0,226,52,1,0,0,0,227,228,5,39,0,0,228,230,
  	5,98,0,0,229,231,2,48,49,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,
  	0,0,0,232,233,1,0,0,0,233,54,1,0,0,0,234,235,5,48,0,0,235,236,5,98,0,
  	0,236,238,1,0,0,0,237,239,2,48,49,0,238,237,1,0,0,0,239,240,1,0,0,0,240,
  	238,1,0,0,0,240,241,1,0,0,0,241,56,1,0,0,0,242,243,5,48,0,0,243,244,5,
  	120,0,0,244,246,1,0,0,0,245,247,7,4,0,0,246,245,1,0,0,0,247,248,1,0,0,
  	0,248,246,1,0,0,0,248,249,1,0,0,0,249,259,1,0,0,0,250,251,5,48,0,0,251,
  	252,5,120,0,0,252,254,1,0,0,0,253,255,7,5,0,0,254,253,1,0,0,0,255,256,
  	1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,242,1,0,0,
  	0,258,250,1,0,0,0,259,58,1,0,0,0,260,261,5,64,0,0,261,262,5,116,0,0,262,
  	263,5,114,0,0,263,264,5,117,0,0,264,272,5,101,0,0,265,266,5,64,0,0,266,
  	267,5,102,0,0,267,268,5,97,0,0,268,269,5,108,0,0,269,270,5,115,0,0,270,
  	272,5,101,0,0,271,260,1,0,0,0,271,265,1,0,0,0,272,60,1,0,0,0,273,274,
  	5,43,0,0,274,62,1,0,0,0,275,276,5,45,0,0,276,64,1,0,0,0,277,278,5,42,
  	0,0,278,66,1,0,0,0,279,280,5,47,0,0,280,68,1,0,0,0,281,282,5,62,0,0,282,
  	70,1,0,0,0,283,284,5,62,0,0,284,285,5,61,0,0,285,72,1,0,0,0,286,287,5,
  	60,0,0,287,74,1,0,0,0,288,289,5,60,0,0,289,290,5,61,0,0,290,76,1,0,0,
  	0,291,292,5,61,0,0,292,293,5,61,0,0,293,78,1,0,0,0,294,295,5,33,0,0,295,
  	296,5,61,0,0,296,80,1,0,0,0,297,298,5,38,0,0,298,82,1,0,0,0,299,300,5,
  	124,0,0,300,84,1,0,0,0,301,302,5,94,0,0,302,86,1,0,0,0,303,304,5,126,
  	0,0,304,88,1,0,0,0,305,306,5,60,0,0,306,307,5,60,0,0,307,90,1,0,0,0,308,
  	309,5,62,0,0,309,310,5,62,0,0,310,92,1,0,0,0,311,312,5,38,0,0,312,313,
  	5,38,0,0,313,94,1,0,0,0,314,315,5,124,0,0,315,316,5,124,0,0,316,96,1,
  	0,0,0,317,318,5,33,0,0,318,98,1,0,0,0,319,320,7,6,0,0,320,321,1,0,0,0,
  	321,322,6,49,0,0,322,100,1,0,0,0,19,0,188,194,199,202,204,209,212,217,
  	223,225,232,240,246,248,254,256,258,271,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  stllexerLexerStaticData = staticData.release();
}

}

stlLexer::stlLexer(CharStream *input) : Lexer(input) {
  stlLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *stllexerLexerStaticData->atn, stllexerLexerStaticData->decisionToDFA, stllexerLexerStaticData->sharedContextCache);
}

stlLexer::~stlLexer() {
  delete _interpreter;
}

std::string stlLexer::getGrammarFileName() const {
  return "stl.g4";
}

const std::vector<std::string>& stlLexer::getRuleNames() const {
  return stllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& stlLexer::getChannelNames() const {
  return stllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& stlLexer::getModeNames() const {
  return stllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& stlLexer::getVocabulary() const {
  return stllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView stlLexer::getSerializedATN() const {
  return stllexerLexerStaticData->serializedATN;
}

const atn::ATN& stlLexer::getATN() const {
  return *stllexerLexerStaticData->atn;
}




void stlLexer::initialize() {
  std::call_once(stllexerLexerOnceFlag, stllexerLexerInitialize);
}
